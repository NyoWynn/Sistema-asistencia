@model SistemaAsistencia.Models.PagedResult<SistemaAsistencia.Models.User>

@{
    ViewData["Title"] = "Panel de Administración";
}

<h1>@ViewData["Title"]</h1>

<div class="container mb-4">
    <div class="row">
        <div class="col-md-12">
            <h4>Acciones Rápidas</h4>

            <hr />
            <a asp-action="Create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Crear Nuevo Usuario
            </a>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-md-12">
            <h4>Reportes de Asistencia</h4>
            
            <hr />

            <a asp-controller="Admin" asp-action="MonthlyReport" class="btn btn-primary">
                <i class="bi bi-calendar-month"></i> Reporte General Mensual
            </a>
           
            <hr />
            <a asp-controller="Admin" asp-action="LateArrivalsReport" class="btn btn-warning">
                <i class="bi bi-clock-history"></i> Reporte de Atrasos
            </a>
            <a asp-controller="Admin" asp-action="EarlyDeparturesReport" class="btn btn-info">
                <i class="bi bi-box-arrow-right"></i> Reporte de Salidas Anticipadas
            </a>
            <a asp-controller="Admin" asp-action="AbsenceReport" class="btn btn-danger">
                <i class="bi bi-calendar-x"></i> Reporte de Inasistencias
            </a>
        </div>
    </div>
    <hr />
  

    <a asp-action="ManualRecord" class="btn btn-info">
        <i class="bi bi-pencil-square"></i> Registrar Asistencia Manualmente
    </a>
    <form asp-action="SimulateRecords" method="post" class="d-inline" onsubmit="return confirm('¿Está seguro? Esto borrará todos los registros de asistencia existentes y creará nuevos datos de prueba.');">
    </form>
</div>
<div class="container mt-4">
    <h4>Lista de Usuarios</h4>
    <hr />
    <form asp-action="Index" method="get">
        <div class="input-group mb-3">
            <input type="text" name="searchString" class="form-control" placeholder="Buscar por nombre o email..." value="@ViewData["CurrentFilter"]">
            <input type="hidden" name="pageNumber" value="1" />
            <button class="btn btn-primary" type="submit">
                <i class="bi bi-search"></i> Buscar
            </button>
            <a asp-action="Index" class="btn btn-secondary">Limpiar Filtro</a>
        </div>
    </form>

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Email</th>
                <th>Es Administrador</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Items)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                    <td>
                        @if (item.IsAdmin)
                        {
                            <span class="badge bg-danger">Administrador</span>
                        }
                        else
                        {
                            <span class="badge bg-success">Usuario</span>
                        }
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm">Editar</a> |
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">Detalles</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Eliminar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Información de paginación -->
    <div class="row mt-3">
        <div class="col-md-6">
            <p class="text-muted">
                Mostrando @((Model.PageNumber - 1) * Model.PageSize + 1) a 
                @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount)) 
                de @Model.TotalCount registros
            </p>
        </div>
        <div class="col-md-6">
            <div class="d-flex justify-content-end">
                <select name="pageSize" class="form-select me-2" style="width: auto;" onchange="changePageSize(this.value)">
                    <option value="5" selected="@(Model.PageSize == 5)">5 por página</option>
                    <option value="10" selected="@(Model.PageSize == 10)">10 por página</option>
                    <option value="20" selected="@(Model.PageSize == 20)">20 por página</option>
                    <option value="50" selected="@(Model.PageSize == 50)">50 por página</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Navegación de páginas -->
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Navegación de páginas">
            <ul class="pagination justify-content-center">
                <!-- Primera página -->
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = 1, pageSize = Model.PageSize, searchString = ViewData["CurrentFilter"] })">
                            <i class="bi bi-chevron-double-left"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize, searchString = ViewData["CurrentFilter"] })">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                    </li>
                }

                <!-- Páginas numeradas -->
                @for (int i = Model.StartPage; i <= Model.EndPage; i++)
                {
                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = i, pageSize = Model.PageSize, searchString = ViewData["CurrentFilter"] })">@i</a>
                    </li>
                }

                <!-- Siguiente página -->
                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize, searchString = ViewData["CurrentFilter"] })">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.TotalPages, pageSize = Model.PageSize, searchString = ViewData["CurrentFilter"] })">
                            <i class="bi bi-chevron-double-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

<script>
function changePageSize(pageSize) {
    const url = new URL(window.location);
    url.searchParams.set('pageSize', pageSize);
    url.searchParams.set('pageNumber', '1');
    window.location.href = url.toString();
}
</script>

@* Para usar los íconos de Bootstrap (bi), puedes añadir este CSS en tu _Layout.cshtml si aún no lo tienes *@
@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}